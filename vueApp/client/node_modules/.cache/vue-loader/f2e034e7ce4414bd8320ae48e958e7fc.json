{"remainingRequest":"/home/bluesteel/Desktop/hack19/vueApp/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/bluesteel/Desktop/hack19/vueApp/client/src/components/TaskBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/bluesteel/Desktop/hack19/vueApp/client/src/components/TaskBox.vue","mtime":1571626268000},{"path":"/home/bluesteel/Desktop/hack19/vueApp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bluesteel/Desktop/hack19/vueApp/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/bluesteel/Desktop/hack19/vueApp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bluesteel/Desktop/hack19/vueApp/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport axios from 'axios'\r\nimport {\r\n  CheckIcon, SettingsIcon, PlusIcon, PackageIcon, XIcon, TargetIcon, ZapIcon,\r\n  ZapOffIcon, TrendingUpIcon, CopyIcon, MenuIcon, TrashIcon, HexagonIcon, HelpCircleIcon,\r\n} from 'vue-feather-icons'\r\n\r\nimport TaskModal from '../modals/TaskModal.vue'\r\nimport TaskSettingsModal from '../modals/TaskSettingsModal.vue'\r\nimport TaskBoxHelp from '../modals/TaskBoxHelp.vue'\r\n\r\nimport ButtonToggleBox from './widgets/ButtonToggleBox.vue'\r\nimport DurationBadge from './widgets/DurationBadge.vue'\r\nimport MoneyValueBadge from './widgets/MoneyValueBadge.vue'\r\nimport DueDateBadge from './widgets/DueDateBadge.vue'\r\n\r\nexport default {\r\n  components: {\r\n    CheckIcon,\r\n    SettingsIcon,\r\n    PlusIcon,\r\n    PackageIcon,\r\n    XIcon,\r\n    TargetIcon,\r\n    ZapIcon,\r\n    ZapOffIcon,\r\n    TrendingUpIcon,\r\n    CopyIcon,\r\n    MenuIcon,\r\n    TrashIcon,\r\n    HexagonIcon,\r\n    HelpCircleIcon,\r\n    ButtonToggleBox,\r\n    TaskModal,\r\n    TaskSettingsModal,\r\n    TaskBoxHelp,\r\n    DurationBadge,\r\n    MoneyValueBadge,\r\n    DueDateBadge,\r\n  },\r\n  data() {\r\n    return {\r\n      colors: [],\r\n      tasks: [],\r\n      tags: [],\r\n      newTask: '',\r\n      expanded: true,\r\n      box: 'Task',\r\n      taskHelpModal: false,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    filteredTasks() {\r\n      return this.tasks.filter(task => {\r\n        return (task.activation || this.$store.settings.taskBox.showDeactivated) &&\r\n          (!this.tags.some(Boolean) || this.tags.some(tag => tag && tag === task.goalID))\r\n      })\r\n    },\r\n  },\r\n\r\n  created() {\r\n    this.fetchTasks()\r\n  },\r\n\r\n  methods: {\r\n    toggleTag(goalID) {\r\n      if (this.tags.includes(goalID)) {\r\n        this.tags = this.tags.filter(tag => tag !== goalID)\r\n      } else {\r\n        this.tags.push(goalID)\r\n      }\r\n    },\r\n    changeHighlight(task) {\r\n      if (this.$store.highlightRoutineID === task.routineID) { this.$store.highlightRoutineID = null } else { this.$store.highlightRoutineID = task.routineID }\r\n      if (this.$store.highlightGoalID === task.goalID) {\r\n        this.$store.highlightGoalID = null\r\n      } else { this.$store.highlightGoalID = task.goalID }\r\n    },\r\n    addTask() {\r\n      let param = {\r\n        item: this.newTask,\r\n      }\r\n      axios\r\n        .post('/tasks', param)\r\n        .then(() => {\r\n          this.clearTask()\r\n          this.fetchTasks()\r\n        })\r\n    },\r\n    clearTask() {\r\n      this.newTask = ''\r\n    },\r\n    fetchTasks() {\r\n      axios.get('/tasks').then(response => {\r\n        this.tasks = response.data\r\n        var now = new Date()\r\n        for (var i = 0; i < this.tasks.length; i++) {\r\n          if (!this.tasks[i].activationDate) {\r\n            this.tasks[i].activation = true\r\n          } else if (new Date(this.tasks[i].activationDate) < now) { this.tasks[i].activation = true } else { this.tasks[i].activation = false }\r\n        }\r\n      })\r\n    },\r\n    toggleTaskCompletion(task) {\r\n      let id = task._id\r\n      \r\n      if (task.completion) {\r\n        axios\r\n          .patch(`/tasks/${id}`, { completion: false })\r\n          .then(() => {\r\n            this.$store.settings.points -= Number(task.valuePoints)\r\n            task.completion = false\r\n            axios.patch('/settings/', this.$store.settings )\r\n          })\r\n      } else {\r\n        if (!task.routine) {\r\n        axios\r\n          .patch(`/tasks/${id}`, { completion: true, focus: false })\r\n          .then(() => {\r\n            this.$store.settings.points += Number(task.valuePoints)\r\n            task.completion = true\r\n            this.$set(task, 'focus', false)\r\n            axios.patch('/settings/', this.$store.settings )\r\n          })\r\n        } else { \r\n          let r = this.$store.routines.find(routine => {\r\n            return task.routineID === routine._id\r\n          })\r\n          let c = r.completions + 1;\r\n          axios\r\n            .patch(`/routines/${task.routineID}`, { completion: true, completions: c })\r\n            .then(() => {\r\n              r.completion = true\r\n              r.completions += 1;\r\n            })\r\n          this.deleteTask(task) \r\n          }\r\n      }\r\n    },\r\n    toggleTaskFocus(task) {\r\n      let id = task._id\r\n      if (task.focus) {\r\n        axios\r\n          .patch(`/tasks/${id}`, { focus: false })\r\n          .then(() => {\r\n            task.focus = false\r\n          })\r\n      } else {\r\n        axios\r\n          .patch(`/tasks/${id}`, { focus: true })\r\n          .then(() => {\r\n            this.$set(task, 'focus', true)\r\n          })\r\n      }\r\n    },\r\n    async saveChanges(task) {\r\n      await axios.patch(`/tasks/${task._id}`, task)\r\n      task.lastEdited = new Date()\r\n    },\r\n    async deleteTask(task) {\r\n      await axios.delete(`/tasks/${task._id}`)\r\n      this.tasks = this.tasks.filter(t => t !== task)\r\n    },\r\n    anyChangeTimer(item) {\r\n      if (item.timer) {\r\n        axios\r\n          .put(`anyChangeTimer/${item._id}/${item.type}/false`)\r\n          .then(() => {\r\n            this.fetchTasks()\r\n          })\r\n      } else {\r\n        axios\r\n          .put(`anyChangeTimer/${item._id}/${item.type}/true`)\r\n          .then(() => {\r\n            this.fetchTasks()\r\n          })\r\n      }\r\n    },\r\n    showItemModal(task) {\r\n      this.$store.Item = task\r\n\r\n      this.$modal.show('taskModal',)\r\n    },\r\n    showTaskSettingsModal() {\r\n      this.$modal.show('taskSettingsModal',)\r\n    },\r\n  },\r\n}\r\n\r\n",{"version":3,"sources":["TaskBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0OA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TaskBox.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div\r\n    class=\"shadow-lg bg-white rounded-lg\"\r\n    style=\"white-space: nowrap;\r\n  margin-bottom: 16px;\r\n  -webkit-column-break-inside: avoid;\r\n        page-break-inside: avoid;\r\n             break-inside: avoid;\"\r\n  >\r\n    <!-- taskbox -->\r\n    <h2 class=\"p-2 bg-gray-200 border-b-2 border-yellow-600\">\r\n      <button-toggle-box\r\n        v-model=\"expanded\"\r\n        expanded-class=\"text-yellow-600\"\r\n        minimized-class=\"hover:text-yellow-600\"\r\n      >\r\n        <check-icon />\r\n      </button-toggle-box>\r\n      <span class=\"text-gray-600 uppercase tracking-wide font-medium text-sm\">\r\n        Tasks\r\n      </span>\r\n      <button\r\n        class=\"text-gray-600 hover:text-yellow-600 align-middle float-right\"\r\n        @click=\"showTaskSettingsModal\"\r\n      >\r\n        <settings-icon />\r\n      </button>\r\n      <button\r\n        class=\"mr-2 text-gray-600 hover:text-yellow-600 align-middle float-right\"\r\n        @click=\"taskHelpModal = true\"\r\n      >\r\n        <help-circle-icon />\r\n      </button>\r\n    </h2>\r\n\r\n    <div\r\n      v-show=\"expanded\"\r\n      class=\"flex p-1\"\r\n    >\r\n      <form\r\n        class=\"flex flex-grow\"\r\n        @submit.prevent=\"addTask\"\r\n      >\r\n        <input\r\n          v-model=\"newTask\"\r\n          class=\"flex-grow px-1 outline-none\"\r\n          type=\"text\"\r\n          placeholder=\"New Task\"\r\n        >\r\n        <button\r\n          type=\"submit\"\r\n          class=\"border-2 p-1 border-gray-500 text-gray-500 hover:text-yellow-500 hover:border-yellow-500 rounded-sm\"\r\n        >\r\n          <plus-icon />\r\n        </button>\r\n      </form>\r\n      <button\r\n        type=\"submit\"\r\n        class=\"p-1 ml-1 border-2 border-yellow-500 bg-yellow-500 text-white hover:bg-yellow-400 rounded-sm flex-shrink-0\"\r\n      >\r\n        <package-icon />\r\n      </button>\r\n    </div>\r\n\r\n    <!-- tag list -->\r\n    <div\r\n      v-show=\"expanded\"\r\n      class=\"flex p-1 overflow-x-auto border-t-2 border-gray-500\"\r\n    >\r\n      <button\r\n        v-for=\"goal in $store.goals\"\r\n        :key=\"goal._id\"\r\n        class=\"border-2 px-1 mr-1 border-gray-500 rounded-sm flex-shrink-0\"\r\n        :class=\"{\r\n          'bg-teal-500 text-white border-teal-500 hover:bg-teal-400 hover:border-teal-500': tags.includes(goal._id),\r\n          'bg-white text-gray-500 border-gray-500 hover:text-teal-500 hover:border-teal-500': !tags.includes(goal._id),\r\n        }\"\r\n        @click=\"toggleTag(goal._id)\"\r\n      >\r\n        {{ goal.name }}\r\n      </button>\r\n    </div>\r\n\r\n    <div\r\n      class=\"\"\r\n      style=\"-webkit-column-break-inside: avoid;\r\n          page-break-inside: avoid;\r\n               break-inside: avoid;\r\n               overflow-y: auto;\r\n               max-height: 81vh;\"\r\n    >\r\n      <ol v-show=\"(tasks.length>0) && (expanded)\">\r\n        <li\r\n          v-for=\"(task, i) in filteredTasks.slice().reverse()\"\r\n          :key=\"task._id\"\r\n          class=\"border-gray-500 border-t-2 flex items-top bg-gray-100 text-left p-1\"\r\n          :class=\"{ 'bg-gray-200': !(i % 2), 'bg-gray-400': task.completion }\"\r\n          @mouseleave=\"changeHighlight(task)\"\r\n          @mouseenter=\"changeHighlight(task)\"\r\n        >\r\n          <button\r\n            v-show=\"task.completion==false\"\r\n            class=\"border-gray-500 border-2 px-1 text-gray-500 hover:text-yellow-600 hover:border-yellow-600 rounded-sm\"\r\n            @click=\"toggleTaskCompletion(task)\"\r\n          >\r\n            <check-icon />\r\n          </button>\r\n          <button\r\n            v-show=\"task.completion==true\"\r\n            class=\"border-2 px-1 border-gray-500 text-gray-500 hover:text-red-500 hover:border-red-500 rounded-sm\"\r\n            @click=\"toggleTaskCompletion(task)\"\r\n          >\r\n            <x-icon />\r\n          </button>\r\n\r\n          <div />\r\n\r\n          <button\r\n            class=\"hover:text-red-500 mx-1\"\r\n            :class=\"{\r\n              'text-gray-500': !task.focus,\r\n              'text-red-500': task.focus\r\n            }\"\r\n            @click=\"toggleTaskFocus(task)\"\r\n          >\r\n            <target-icon />\r\n          </button>\r\n\r\n          <div class=\"border-1 border-solid border-blue-500 w-auto flex-grow\">\r\n            <input\r\n              v-model=\"task.item\"\r\n              type=\"text\"\r\n              class=\"truncate flex-grow pl-1 bg-transparent border-gray-500 h-full w-full\"\r\n              :class=\"{\r\n                'line-through text-gray-600': task.completion,\r\n                'text-gray-900': !task.completion\r\n              }\"\r\n              @keyup.enter=\"saveChanges(task)\"\r\n            >\r\n          </div>\r\n\r\n          <div\r\n            v-show=\"task.valuePoints\"\r\n            class=\"flex p-1 hover:text-yellow-500 text-gray-500\"\r\n          >\r\n            <hexagon-icon />\r\n            <span>{{ task.valuePoints }}</span>\r\n          </div>\r\n\r\n          <div\r\n            v-show=\"task.activationDate && task.activation\"\r\n            class=\"p-1 hover:text-yellow-500 text-gray-500\"\r\n            :title=\"`Task Activated on ${task.activationDate}`\"\r\n          >\r\n            <zap-icon />\r\n          </div>\r\n\r\n          <div\r\n            v-show=\"task.activationDate && !task.activation\"\r\n            class=\"p-1 hover:text-yellow-500 text-gray-500\"\r\n            :title=\"`Task Not Activated`\"\r\n          >\r\n            <zap-off-icon />\r\n          </div>\r\n\r\n          <div\r\n            v-show=\"task.goalID\"\r\n            class=\"text-gray-500 hover:text-teal-400 p-1\"\r\n            :title=\"`${task.goalName}`\"\r\n          >\r\n            <!-- <span class=\"px-1 uppercase tracking-wide font-medium text-sm\">{{ task.goalName }}</span> -->\r\n            <trending-up-icon />\r\n          </div>\r\n\r\n          <div\r\n            v-show=\"task.routine\"\r\n            class=\"p-1\"\r\n            :class=\"{\r\n              'line-through text-gray-500': task.completion,\r\n              'text-blue-500': !task.completion\r\n            }\"\r\n            :title=\"`Generated by Routine on ${task.createdAt}`\"\r\n          >\r\n            <copy-icon />\r\n          </div>\r\n\r\n          <due-date-badge :value=\"task.dueDate\" />\r\n\r\n          <duration-badge :value=\"Number(task.duration)\" />\r\n\r\n          <money-value-badge :value=\"Number(task.valueMoney)\" />\r\n\r\n          <div class=\"flex\">\r\n            <button\r\n              v-if=\"$store.settings.taskBox.showDeleteButton || task.completion\"\r\n              class=\"border-2 ml-1 px-1 border-gray-500 flex-shrink-0 text-gray-500 hover:text-red-500 hover:border-red-500 rounded-sm\"\r\n              @click=\"deleteTask(task)\"\r\n            >\r\n              <trash-icon />\r\n            </button>\r\n            <button\r\n              class=\"border-gray-500 ml-1 border-2 flex-shrink-0 text-gray-500 hover:text-blue-500 hover:border-blue-500 p-1 rounded-sm\"\r\n              @click=\"showItemModal(task)\"\r\n            >\r\n              <menu-icon />\r\n            </button>\r\n          </div>\r\n        </li>\r\n      </ol>\r\n\r\n      <div\r\n        v-show=\"tasks.length==0\"\r\n        class=\"row alert alert-info text-center bg-gray-200\"\r\n      >\r\n        <p class=\"alert alert-info truncate text-gray-500\">\r\n          The Task Box is empty. Create a new Task above!\r\n        </p>\r\n      </div>\r\n\r\n      <task-modal style=\"overflow-y: scroll;\" />\r\n\r\n      <modal\r\n        name=\"taskSettingsModal\"\r\n        height=\"600px\"\r\n        width=\"400px\"\r\n      >\r\n        <task-settings-modal />\r\n      </modal>\r\n      <task-box-help v-model=\"taskHelpModal\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport {\r\n  CheckIcon, SettingsIcon, PlusIcon, PackageIcon, XIcon, TargetIcon, ZapIcon,\r\n  ZapOffIcon, TrendingUpIcon, CopyIcon, MenuIcon, TrashIcon, HexagonIcon, HelpCircleIcon,\r\n} from 'vue-feather-icons'\r\n\r\nimport TaskModal from '../modals/TaskModal.vue'\r\nimport TaskSettingsModal from '../modals/TaskSettingsModal.vue'\r\nimport TaskBoxHelp from '../modals/TaskBoxHelp.vue'\r\n\r\nimport ButtonToggleBox from './widgets/ButtonToggleBox.vue'\r\nimport DurationBadge from './widgets/DurationBadge.vue'\r\nimport MoneyValueBadge from './widgets/MoneyValueBadge.vue'\r\nimport DueDateBadge from './widgets/DueDateBadge.vue'\r\n\r\nexport default {\r\n  components: {\r\n    CheckIcon,\r\n    SettingsIcon,\r\n    PlusIcon,\r\n    PackageIcon,\r\n    XIcon,\r\n    TargetIcon,\r\n    ZapIcon,\r\n    ZapOffIcon,\r\n    TrendingUpIcon,\r\n    CopyIcon,\r\n    MenuIcon,\r\n    TrashIcon,\r\n    HexagonIcon,\r\n    HelpCircleIcon,\r\n    ButtonToggleBox,\r\n    TaskModal,\r\n    TaskSettingsModal,\r\n    TaskBoxHelp,\r\n    DurationBadge,\r\n    MoneyValueBadge,\r\n    DueDateBadge,\r\n  },\r\n  data() {\r\n    return {\r\n      colors: [],\r\n      tasks: [],\r\n      tags: [],\r\n      newTask: '',\r\n      expanded: true,\r\n      box: 'Task',\r\n      taskHelpModal: false,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    filteredTasks() {\r\n      return this.tasks.filter(task => {\r\n        return (task.activation || this.$store.settings.taskBox.showDeactivated) &&\r\n          (!this.tags.some(Boolean) || this.tags.some(tag => tag && tag === task.goalID))\r\n      })\r\n    },\r\n  },\r\n\r\n  created() {\r\n    this.fetchTasks()\r\n  },\r\n\r\n  methods: {\r\n    toggleTag(goalID) {\r\n      if (this.tags.includes(goalID)) {\r\n        this.tags = this.tags.filter(tag => tag !== goalID)\r\n      } else {\r\n        this.tags.push(goalID)\r\n      }\r\n    },\r\n    changeHighlight(task) {\r\n      if (this.$store.highlightRoutineID === task.routineID) { this.$store.highlightRoutineID = null } else { this.$store.highlightRoutineID = task.routineID }\r\n      if (this.$store.highlightGoalID === task.goalID) {\r\n        this.$store.highlightGoalID = null\r\n      } else { this.$store.highlightGoalID = task.goalID }\r\n    },\r\n    addTask() {\r\n      let param = {\r\n        item: this.newTask,\r\n      }\r\n      axios\r\n        .post('/tasks', param)\r\n        .then(() => {\r\n          this.clearTask()\r\n          this.fetchTasks()\r\n        })\r\n    },\r\n    clearTask() {\r\n      this.newTask = ''\r\n    },\r\n    fetchTasks() {\r\n      axios.get('/tasks').then(response => {\r\n        this.tasks = response.data\r\n        var now = new Date()\r\n        for (var i = 0; i < this.tasks.length; i++) {\r\n          if (!this.tasks[i].activationDate) {\r\n            this.tasks[i].activation = true\r\n          } else if (new Date(this.tasks[i].activationDate) < now) { this.tasks[i].activation = true } else { this.tasks[i].activation = false }\r\n        }\r\n      })\r\n    },\r\n    toggleTaskCompletion(task) {\r\n      let id = task._id\r\n      \r\n      if (task.completion) {\r\n        axios\r\n          .patch(`/tasks/${id}`, { completion: false })\r\n          .then(() => {\r\n            this.$store.settings.points -= Number(task.valuePoints)\r\n            task.completion = false\r\n            axios.patch('/settings/', this.$store.settings )\r\n          })\r\n      } else {\r\n        if (!task.routine) {\r\n        axios\r\n          .patch(`/tasks/${id}`, { completion: true, focus: false })\r\n          .then(() => {\r\n            this.$store.settings.points += Number(task.valuePoints)\r\n            task.completion = true\r\n            this.$set(task, 'focus', false)\r\n            axios.patch('/settings/', this.$store.settings )\r\n          })\r\n        } else { \r\n          let r = this.$store.routines.find(routine => {\r\n            return task.routineID === routine._id\r\n          })\r\n          let c = r.completions + 1;\r\n          axios\r\n            .patch(`/routines/${task.routineID}`, { completion: true, completions: c })\r\n            .then(() => {\r\n              r.completion = true\r\n              r.completions += 1;\r\n            })\r\n          this.deleteTask(task) \r\n          }\r\n      }\r\n    },\r\n    toggleTaskFocus(task) {\r\n      let id = task._id\r\n      if (task.focus) {\r\n        axios\r\n          .patch(`/tasks/${id}`, { focus: false })\r\n          .then(() => {\r\n            task.focus = false\r\n          })\r\n      } else {\r\n        axios\r\n          .patch(`/tasks/${id}`, { focus: true })\r\n          .then(() => {\r\n            this.$set(task, 'focus', true)\r\n          })\r\n      }\r\n    },\r\n    async saveChanges(task) {\r\n      await axios.patch(`/tasks/${task._id}`, task)\r\n      task.lastEdited = new Date()\r\n    },\r\n    async deleteTask(task) {\r\n      await axios.delete(`/tasks/${task._id}`)\r\n      this.tasks = this.tasks.filter(t => t !== task)\r\n    },\r\n    anyChangeTimer(item) {\r\n      if (item.timer) {\r\n        axios\r\n          .put(`anyChangeTimer/${item._id}/${item.type}/false`)\r\n          .then(() => {\r\n            this.fetchTasks()\r\n          })\r\n      } else {\r\n        axios\r\n          .put(`anyChangeTimer/${item._id}/${item.type}/true`)\r\n          .then(() => {\r\n            this.fetchTasks()\r\n          })\r\n      }\r\n    },\r\n    showItemModal(task) {\r\n      this.$store.Item = task\r\n\r\n      this.$modal.show('taskModal',)\r\n    },\r\n    showTaskSettingsModal() {\r\n      this.$modal.show('taskSettingsModal',)\r\n    },\r\n  },\r\n}\r\n\r\n</script>\r\n"]}]}