{"remainingRequest":"/home/bluesteel/Desktop/hack19/vueApp/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/bluesteel/Desktop/hack19/vueApp/client/src/components/SubscriptionBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/bluesteel/Desktop/hack19/vueApp/client/src/components/SubscriptionBox.vue","mtime":1571626268000},{"path":"/home/bluesteel/Desktop/hack19/vueApp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bluesteel/Desktop/hack19/vueApp/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/bluesteel/Desktop/hack19/vueApp/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bluesteel/Desktop/hack19/vueApp/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { addDays } from 'date-fns'\r\nimport axios from 'axios'\r\nimport { CreditCardIcon, PackageIcon, PlusIcon, MenuIcon, ExternalLinkIcon } from 'vue-feather-icons'\r\n\r\nimport bus from './../bus.js'\r\n\r\nimport ButtonToggleBox from './widgets/ButtonToggleBox.vue'\r\nimport SubscriptionModal from '../modals/SubscriptionModal.vue'\r\nimport MoneyValueBadge from './widgets/MoneyValueBadge.vue'\r\n\r\nexport default {\r\n  components: {\r\n    CreditCardIcon,\r\n    PackageIcon,\r\n    PlusIcon,\r\n    MenuIcon,\r\n    ExternalLinkIcon,\r\n    ButtonToggleBox,\r\n    SubscriptionModal,\r\n    MoneyValueBadge,\r\n  },\r\n  data() {\r\n    return {\r\n      subscriptions: [],\r\n      newSubscription: '',\r\n      expanded: true,\r\n      box: 'Subscription',\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchSubscriptions()\r\n    this.listenToEvents()\r\n  },\r\n  methods: {\r\n    showSubscriptionSettingsModal() {\r\n      // this.$modal.show('subscriptionSettingsModal',)\r\n    },\r\n    addSubscription() {\r\n      let param = {\r\n        item: this.newSubscription,\r\n      }\r\n      axios\r\n        .post('/subscriptions', param)\r\n        .then(() => {\r\n          this.clearSubscription()\r\n          this.fetchSubscriptions()\r\n        })\r\n    },\r\n    clearSubscription() {\r\n      this.newSubscription = ''\r\n    },\r\n    refreshSubscriptions() {\r\n      bus.$emit('refreshSubscriptions')\r\n    },\r\n    fetchSubscriptions() {\r\n      axios.get('/subscriptions').then(response => {\r\n        this.subscriptions = response.data\r\n      })\r\n    },\r\n    async saveChanges(subscription) {\r\n      await axios.patch(`/subscriptions/${subscription._id}`, subscription)\r\n      subscription.lastEdited = new Date()\r\n    },\r\n    deleteSubscription(id) {\r\n      axios\r\n        .get(`/deleteSubscription/${id}`)\r\n        .then(() => {\r\n          this.fetchSubscriptions()\r\n        })\r\n    },\r\n    anyChangeTimer(item) {\r\n      if (item.timer) {\r\n        axios\r\n          .put(`anyChangeTimer/${item._id}/${item.type}/false`)\r\n          .then(() => {\r\n            this.fetchSubscriptions()\r\n          })\r\n      } else {\r\n        axios\r\n          .put(`anyChangeTimer/${item._id}/${item.type}/true`)\r\n          .then(() => {\r\n            this.fetchSubscriptions()\r\n          })\r\n      }\r\n    },\r\n    showSubscriptionModal(subscription) {\r\n      this.$store.Item = subscription\r\n\r\n      this.$modal.show('subscriptionModal',)\r\n    },\r\n    listenToEvents() {\r\n      bus.$on('refreshSubscriptions', () => {\r\n        this.fetchSubscriptions() // update subscription\r\n      })\r\n    },\r\n    subscriptionGenerateTask(subscription) {\r\n      if (event) event.preventDefault()\r\n      let param = {\r\n        item: subscription.item,\r\n        priority: subscription.priority,\r\n        difficulty: subscription.difficulty,\r\n        goalID: subscription.goalID,\r\n        duration: subscription.duration,\r\n        valueMoney: subscription.valueMoney,\r\n      }\r\n      axios\r\n        .post(`/subscriptionGenerateTask/${subscription._id}`, param)\r\n        .then(() => {\r\n          this.clearSubscription()\r\n          this.refreshTasks()\r\n        })\r\n    },\r\n    refreshTasks() {\r\n      bus.$emit('refreshTasks')\r\n    },\r\n  },\r\n}\r\n\r\n",{"version":3,"sources":["SubscriptionBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"SubscriptionBox.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div\r\n    class=\"shadow-lg bg-white rounded-lg\"\r\n    style=\"white-space: nowrap;\r\n  margin-bottom: 32px;\r\n  -webkit-column-break-inside: avoid;\r\n        page-break-inside: avoid;\r\n             break-inside: avoid;\"\r\n  >\r\n    <!-- subscriptionbox -->\r\n    <h2 class=\"p-2 bg-gray-200 border-b-2 border-orange-500\">\r\n      <button-toggle-box\r\n        v-model=\"expanded\"\r\n        expanded-class=\"text-orange-500\"\r\n        minimized-class=\"hover:text-orange-500\"\r\n      >\r\n        <credit-card-icon />\r\n      </button-toggle-box>\r\n\r\n      <span class=\"text-gray-600 uppercase tracking-wide font-medium text-sm\">\r\n        Subscriptions\r\n      </span>\r\n    </h2>\r\n\r\n    <div\r\n      v-show=\"expanded\"\r\n      class=\"flex p-1\"\r\n    >\r\n      <form\r\n        class=\"flex flex-grow\"\r\n        @submit.prevent=\"addSubscription\"\r\n      >\r\n        <input\r\n          v-model=\"newSubscription\"\r\n          class=\"flex-grow px-1 outline-none\"\r\n          type=\"text\"\r\n          placeholder=\"New Subscription\"\r\n        >\r\n        <button\r\n          type=\"submit\"\r\n          class=\"border-2 p-1 border-gray-500 text-gray-500 hover:text-yellow-500 hover:border-yellow-500 rounded-sm\"\r\n        >\r\n          <plus-icon />\r\n        </button>\r\n      </form>\r\n      <button\r\n        type=\"submit\"\r\n        class=\"p-1 ml-1 border-2 border-orange-500 bg-orange-500 text-white hover:bg-orange-400 rounded-sm flex-shrink-0\"\r\n      >\r\n        <package-icon />\r\n      </button>\r\n    </div>\r\n\r\n    <div\r\n      class=\"\"\r\n      style=\"-webkit-column-break-inside: avoid;\r\n          page-break-inside: avoid;\r\n               break-inside: avoid;\"\r\n    >\r\n      <ol v-show=\"(subscriptions.length>0) && (expanded)\">\r\n        <li\r\n          v-for=\"(subscription, i) in subscriptions.slice().reverse()\"\r\n          :key=\"subscription._id\"\r\n          class=\"border-gray-500 border-t-2 flex items-top bg-gray-100 text-left p-1\"\r\n          :class=\"{ 'bg-gray-200': !(i % 2), 'bg-blue-200': ($store.highlightSubscriptionID === subscription._id) }\"\r\n        >\r\n          <button\r\n            class=\"border-2 px-1 border-gray-500 text-gray-500 hover:text-yellow-500 hover:border-yellow-500 rounded-sm\"\r\n          >\r\n            <external-link-icon />\r\n          </button>\r\n\r\n          <div />\r\n\r\n          <div class=\"ml-1 border-1 border-solid border-blue-500 w-auto flex-grow\">\r\n            <input\r\n              v-model=\"subscription.item\"\r\n              type=\"text\"\r\n              class=\"truncate flex-grow pl-1 bg-transparent border-gray-500 h-full w-full\"\r\n              :class=\"{\r\n                'line-through text-gray-600': subscription.completion,\r\n                'text-gray-900': !subscription.completion\r\n              }\"\r\n              @keyup.enter=\"saveChanges(subscription)\"\r\n            >\r\n          </div>\r\n\r\n          <money-value-badge :value=\"Number(subscription.valueMoney)\" />\r\n\r\n          <div class=\"flex\">\r\n            <button\r\n              class=\"ml-1 border-gray-500 border-2 flex-shrink-0 text-gray-500 hover:text-blue-500 hover:border-blue-500 p-1 rounded-sm\"\r\n              @click=\"showSubscriptionModal(subscription)\"\r\n            >\r\n              <menu-icon />\r\n            </button>\r\n          </div>\r\n        </li>\r\n      </ol>\r\n\r\n      <div\r\n        v-show=\"subscriptions.length==0 && expanded\"\r\n        class=\"text-center bg-gray-200\"\r\n      >\r\n        <p class=\"truncate text-gray-500\">\r\n          The Subscription Box is empty. Create a new Subscription above!\r\n        </p>\r\n      </div>\r\n\r\n      <subscription-modal style=\"overflow-y: scroll;\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { addDays } from 'date-fns'\r\nimport axios from 'axios'\r\nimport { CreditCardIcon, PackageIcon, PlusIcon, MenuIcon, ExternalLinkIcon } from 'vue-feather-icons'\r\n\r\nimport bus from './../bus.js'\r\n\r\nimport ButtonToggleBox from './widgets/ButtonToggleBox.vue'\r\nimport SubscriptionModal from '../modals/SubscriptionModal.vue'\r\nimport MoneyValueBadge from './widgets/MoneyValueBadge.vue'\r\n\r\nexport default {\r\n  components: {\r\n    CreditCardIcon,\r\n    PackageIcon,\r\n    PlusIcon,\r\n    MenuIcon,\r\n    ExternalLinkIcon,\r\n    ButtonToggleBox,\r\n    SubscriptionModal,\r\n    MoneyValueBadge,\r\n  },\r\n  data() {\r\n    return {\r\n      subscriptions: [],\r\n      newSubscription: '',\r\n      expanded: true,\r\n      box: 'Subscription',\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchSubscriptions()\r\n    this.listenToEvents()\r\n  },\r\n  methods: {\r\n    showSubscriptionSettingsModal() {\r\n      // this.$modal.show('subscriptionSettingsModal',)\r\n    },\r\n    addSubscription() {\r\n      let param = {\r\n        item: this.newSubscription,\r\n      }\r\n      axios\r\n        .post('/subscriptions', param)\r\n        .then(() => {\r\n          this.clearSubscription()\r\n          this.fetchSubscriptions()\r\n        })\r\n    },\r\n    clearSubscription() {\r\n      this.newSubscription = ''\r\n    },\r\n    refreshSubscriptions() {\r\n      bus.$emit('refreshSubscriptions')\r\n    },\r\n    fetchSubscriptions() {\r\n      axios.get('/subscriptions').then(response => {\r\n        this.subscriptions = response.data\r\n      })\r\n    },\r\n    async saveChanges(subscription) {\r\n      await axios.patch(`/subscriptions/${subscription._id}`, subscription)\r\n      subscription.lastEdited = new Date()\r\n    },\r\n    deleteSubscription(id) {\r\n      axios\r\n        .get(`/deleteSubscription/${id}`)\r\n        .then(() => {\r\n          this.fetchSubscriptions()\r\n        })\r\n    },\r\n    anyChangeTimer(item) {\r\n      if (item.timer) {\r\n        axios\r\n          .put(`anyChangeTimer/${item._id}/${item.type}/false`)\r\n          .then(() => {\r\n            this.fetchSubscriptions()\r\n          })\r\n      } else {\r\n        axios\r\n          .put(`anyChangeTimer/${item._id}/${item.type}/true`)\r\n          .then(() => {\r\n            this.fetchSubscriptions()\r\n          })\r\n      }\r\n    },\r\n    showSubscriptionModal(subscription) {\r\n      this.$store.Item = subscription\r\n\r\n      this.$modal.show('subscriptionModal',)\r\n    },\r\n    listenToEvents() {\r\n      bus.$on('refreshSubscriptions', () => {\r\n        this.fetchSubscriptions() // update subscription\r\n      })\r\n    },\r\n    subscriptionGenerateTask(subscription) {\r\n      if (event) event.preventDefault()\r\n      let param = {\r\n        item: subscription.item,\r\n        priority: subscription.priority,\r\n        difficulty: subscription.difficulty,\r\n        goalID: subscription.goalID,\r\n        duration: subscription.duration,\r\n        valueMoney: subscription.valueMoney,\r\n      }\r\n      axios\r\n        .post(`/subscriptionGenerateTask/${subscription._id}`, param)\r\n        .then(() => {\r\n          this.clearSubscription()\r\n          this.refreshTasks()\r\n        })\r\n    },\r\n    refreshTasks() {\r\n      bus.$emit('refreshTasks')\r\n    },\r\n  },\r\n}\r\n\r\n</script>\r\n"]}]}